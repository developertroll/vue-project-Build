{"version":3,"file":"js/947.3191759e.js","mappings":"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","sources":["webpack://vue-project/./src/composables/eventList.js","webpack://vue-project/./src/composables/projectPlanList.js","webpack://vue-project/./src/components/mainPage/mainTable.vue","webpack://vue-project/./src/components/mainPage/mainTable.vue?c244"],"sourcesContent":["import { reactive } from \"vue\";\r\nimport { projectPlanList } from \"./projectPlanList\";\r\nimport { MemberList } from \"./memberList\";\r\nimport { NotificationList } from \"./notificationList\";\r\n\r\nexport const eventList = reactive({\r\n  eventList: localStorage.getItem(\"eventList\")\r\n    ? JSON.parse(localStorage.getItem(\"eventList\"))\r\n    : [],\r\n  detailList: localStorage.getItem(\"detailList\")\r\n    ? JSON.parse(localStorage.getItem(\"detailList\"))\r\n    : [],\r\n  eventTemplate: {\r\n    title: \"\",\r\n    start: \"\",\r\n    end: \"\",\r\n    id: \"\",\r\n  },\r\n  detailTemplate: {\r\n    id: \"\",\r\n    people: [],\r\n    description: \"\",\r\n    location: \"\",\r\n  },\r\n  recurringEventTemplate: {\r\n    groupId: \"\",\r\n    startTime: \"\",\r\n    endTime: \"\",\r\n    title: \"\",\r\n    id: \"\",\r\n  },\r\n  memberSpecificEventList: [],\r\n  setList(name) {\r\n    const raw = projectPlanList.findWorkByName(name);\r\n    // const raw2 = projectPlanList.findProjectByWork(raw);\r\n    //raw는 [{},{}]의 형태로 들어오게 되며, 새로운 리스트에 raw.deadLine이 end로 들어가는 새로운 {}를 만듬.\r\n    const newEvent = [];\r\n    raw.forEach((item) => {\r\n      const parent = projectPlanList.findProjectByWork(item);\r\n      newEvent.push({\r\n        title: parent.title + \" - \" + item.position + \" 마감일\",\r\n        end: item.deadLine,\r\n        start: item.deadLine,\r\n        allDay: true,\r\n        backgroundColor: \"#f56954\",\r\n        type: \"work\",\r\n        id: -1,\r\n      });\r\n    });\r\n    this.memberSpecificEventList = newEvent;\r\n  },\r\n  saveList(list) {\r\n    if (list.id === undefined) {\r\n      list.id = this.eventList.length + 1;\r\n    }\r\n    NotificationList.saveList(\r\n      list,\r\n      \"일정\",\r\n      list.member,\r\n      MemberList.currentMember\r\n    );\r\n    this.eventList.push(list);\r\n    localStorage.setItem(\"eventList\", JSON.stringify(this.eventList));\r\n  },\r\n  setEventByProjects() {\r\n    const rawData = projectPlanList.callPlanList();\r\n    const result = rawData.map((item) => {\r\n      return {\r\n        title: item.title,\r\n        start: item.date1[0],\r\n        end: item.date1[1],\r\n        projectIdx: item.index,\r\n        id: this.eventList.length + 1,\r\n        people: item.Partipacants,\r\n      };\r\n    });\r\n    return result;\r\n  },\r\n});\r\n","import { reactive } from \"vue\";\r\nimport moment from \"moment\";\r\nimport { NotificationList } from \"./notificationList\";\r\nimport { MemberList } from \"./memberList\";\r\n\r\nexport const projectPlanList = reactive({\r\n  List: JSON.parse(localStorage.getItem(\"projectPlanList\")) || [],\r\n  workList: JSON.parse(localStorage.getItem(\"workList\")) || [],\r\n  finishedList: JSON.parse(localStorage.getItem(\"finishedList\")) || [],\r\n  //workList는 계획단계를 넘어간 진행단계에 있는 프로젝트들의 업무가 사용할 테이블. 이렇게 하면 계획안에 있던 내용을 보면서도 진행 중간 업무가 변경되더라도 계획안이 안바뀜.\r\n  saveList(newList, originalIdx = undefined) {\r\n    console.log(newList);\r\n    if (originalIdx !== undefined) {\r\n      const idx = originalIdx;\r\n      const workPush = {\r\n        works: newList.works,\r\n        parentIdx: idx,\r\n      };\r\n      delete newList.works;\r\n      this.List[idx] = { ...newList, index: idx, status: \"진행\" };\r\n      console.log(workPush);\r\n      this.workList.push(workPush);\r\n    } else {\r\n      const idx = this.List.length;\r\n      const workPush = {\r\n        works: newList.works,\r\n        parentIdx: idx,\r\n      };\r\n      delete newList.works;\r\n      this.List.push({ ...newList, index: idx, status: \"진행\" });\r\n      console.log(workPush);\r\n      this.workList.push(workPush);\r\n    }\r\n    NotificationList.saveList(\r\n      newList,\r\n      \"프로젝트\",\r\n      newList.Partipacants,\r\n      MemberList.currentMember\r\n    );\r\n    this.setCookies();\r\n  },\r\n  callWorkList(project) {\r\n    const raw = this.workList.find((list) => list.parentIdx === project.index);\r\n    return raw;\r\n  },\r\n  callPlanList() {\r\n    const rawData = this.List;\r\n    console.log(rawData, \"rawData\");\r\n    const result = rawData.filter((list) => list.status !== \"취소\");\r\n    console.log(result, \"result\");\r\n    return result;\r\n  },\r\n  callList() {\r\n    const rawData = this.List;\r\n    console.log(rawData, \"rawData\");\r\n    const result = rawData.filter(\r\n      (list) =>\r\n        list.status === \"진행\" && list.date1[0] < moment().format(\"YYYY-MM-DD\")\r\n    );\r\n    console.log(result, \"result\");\r\n    return result;\r\n  },\r\n  findParentWorkList(item) {\r\n    const result = this.workList.find((list) => list.parentIdx === item);\r\n    return result;\r\n  },\r\n  workFinish(item) {\r\n    const parentList = this.findParentWorkList(item.parent.index);\r\n    const raw = parentList.works.find((list) => list.name === item.name);\r\n    raw.status = \"완료\";\r\n    console.log(raw);\r\n    if (parentList.works.every((list) => list.status === \"완료\")) {\r\n      const parentProject = this.List.find(\r\n        (list) => list.index === parentList.parentIdx\r\n      );\r\n      parentProject.status = \"완료\";\r\n      const newList = { ...parentProject, works: parentList.works };\r\n      this.finishedList.push(newList);\r\n      const idx = this.workList.indexOf(parentList);\r\n      this.workList.splice(idx, 1);\r\n    }\r\n    this.setCookies();\r\n  },\r\n  // checkEnd() {\r\n  //   const check = this.List.forEach((list) =>\r\n  //     list.works.forEach((list2) => list2.status === \"완료\")\r\n  //   );\r\n  //   q;\r\n  // },\r\n  findWorks(item) {\r\n    console.log(\"입장\", item);\r\n    console.log(\"플젝리스트\", this.List);\r\n    console.log(\"업무리스트\", this.workList);\r\n    const parentProject = this.List.find(\r\n      (list) =>\r\n        list === item.parent || list.index === item.index || list.title === item\r\n    );\r\n    console.log(\"parentProject\", parentProject);\r\n    const result = this.workList.find(\r\n      (list) => list.parentIdx === parentProject.index\r\n    );\r\n    console.log(\"result\", result);\r\n    const find = result.works.find((list) => list.name === item.title);\r\n    console.log(find);\r\n    return find;\r\n  },\r\n  findProject(item) {\r\n    const raw = this.findWorks(item);\r\n    const result = this.List.find((list) => list.index === raw.parentIdx);\r\n    // console.log(\"result\", result);\r\n    return result;\r\n  },\r\n  findWorkAndProject(title) {\r\n    const project = this.List.find((list) => list.title === title);\r\n    let work;\r\n    if (project) {\r\n      const workList = this.workList.find(\r\n        (list) => list.parentIdx === project.index\r\n      );\r\n      if (workList) {\r\n        work = workList.works;\r\n      }\r\n    }\r\n    return { work, project };\r\n  },\r\n  callFinishedList() {\r\n    return this.finishedList;\r\n  },\r\n  findProject2(item) {\r\n    return this.List.find((list) => list.index === item.parentIdx);\r\n  },\r\n  deletePlanWork(item) {\r\n    // Filter out the item to delete from this.List\r\n    this.List = this.List.filter((list) => list.index !== item.index);\r\n\r\n    // Filter out the item to delete from this.workList\r\n    this.workList = this.workList.filter(\r\n      (list) => list.parentIdx !== item.index\r\n    );\r\n  },\r\n  modifySaveList(original, newWork) {\r\n    console.log(original, newWork);\r\n    const originalIdx = original.index;\r\n    this.deletePlanWork(original);\r\n    delete newWork.originalTitle;\r\n    this.saveList(newWork, originalIdx);\r\n  },\r\n  findWorkByName(name) {\r\n    const works = this.workList.flatMap((list) =>\r\n      list.works.filter((work) => work.name === name)\r\n    );\r\n    return works;\r\n  },\r\n  findProjectByName(name) {\r\n    // name을 가지는 workList 내부 works를 찾고, 그 works를 가지는 workList 내부 {}에서 parentIdx를 찾아 해당 parentIdx와 같은 index를 가지는 List 내부 {}를 찾아서 반환\r\n    const works = this.findWorkByName(name);\r\n    const workLists = this.workList.filter((list) =>\r\n      works.some((work) => list.works.includes(work))\r\n    );\r\n    console.log(works, workLists, \"works,workLists\");\r\n    const projects = workLists.map((workList) => {\r\n      const parentIdx = workList.parentIdx;\r\n      return this.List.find((list) => list.index === parentIdx);\r\n    });\r\n    return projects;\r\n  },\r\n  findProjectByWork(work) {\r\n    const workListEntry = this.workList.find((list) =>\r\n      list.works.find((list2) => list2 === work)\r\n    );\r\n    if (!workListEntry) {\r\n      return null; // or throw an error, or handle this case differently\r\n    }\r\n    const parentIdx = workListEntry.parentIdx;\r\n    const project = this.List.find((list) => list.index === parentIdx);\r\n    return project;\r\n  },\r\n  setCookies() {\r\n    localStorage.setItem(\"projectPlanList\", JSON.stringify(this.List));\r\n    localStorage.setItem(\"workList\", JSON.stringify(this.workList));\r\n    localStorage.setItem(\"finishedList\", JSON.stringify(this.finishedList));\r\n  },\r\n  getCookies() {\r\n    this.List = JSON.parse(localStorage.getItem(\"projectPlanList\"));\r\n    this.workList = JSON.parse(localStorage.getItem(\"workList\"));\r\n    this.finishedList = JSON.parse(localStorage.getItem(\"finishedList\"));\r\n  },\r\n});\r\n","<template lang=\"\">\r\n  <!-- <el-table :data=\"tableData\">\r\n    <el-table-column\r\n      v-for=\"(value, key) in tableData[0]\"\r\n      :label=\"key\"\r\n      :prop=\"key\"\r\n      :key=\"key\"\r\n    />\r\n  </el-table> -->\r\n  <div v-if=\"tableData === []\">없음</div>\r\n  <div v-else>\r\n    <el-table :data=\"tableData\" border>\r\n      <el-table-column\r\n        v-for=\"(value, key) in tableData[0]\"\r\n        :label=\"key\"\r\n        :prop=\"key\"\r\n        :key=\"key\"\r\n        show-overflow-tooltip\r\n      />\r\n    </el-table>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { projectPlanList } from \"@/composables/projectPlanList\";\r\nimport { eventList } from \"@/composables/eventList\";\r\n// import { ApprovalList } from \"@/composables/approvalList\";\r\nimport moment from \"moment\";\r\nexport default {\r\n  name: \"mainTable\",\r\n  props: {\r\n    currentMember: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    currentTable: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {};\r\n  },\r\n  mounted() {\r\n    console.log(this.currentTable + \":\", this.currentMember);\r\n  },\r\n  computed: {\r\n    tableData() {\r\n      switch (this.currentTable) {\r\n        case \"projectPlan\": {\r\n          let result = projectPlanList.findProjectByName(this.currentMember);\r\n          let data = [];\r\n          result.forEach((element) => {\r\n            if (\r\n              element.date1[0] < moment().format(\"YYYY-MM-DD\") &&\r\n              element.date1[1] > moment().format(\"YYYY-MM-DD\")\r\n            ) {\r\n              data.push({\r\n                제목: element.title,\r\n                시작일: element.date1[0],\r\n                마감일: element.date1[1],\r\n                설명: element.desc,\r\n                갱신일: element.update,\r\n              });\r\n            }\r\n          });\r\n          return data;\r\n        }\r\n\r\n        case \"eventList\": {\r\n          // eventList에서 eventList 배열에 name이 currentMember이고 start나 end가 오늘인것만 필터링\r\n          let result = eventList.eventList.filter(\r\n            (element) =>\r\n              element.member.find((item) => item.name === this.currentMember) &&\r\n              (moment(element.start).isSame(moment(), \"day\") ||\r\n                moment(element.end).isSame(moment(), \"day\"))\r\n          );\r\n          let data = [];\r\n          result.forEach((element) => {\r\n            let text = element.member.map((member) => member.name).join(\", \");\r\n            data.push({\r\n              제목: element.title,\r\n              설명: element.desc,\r\n              참가인원: text,\r\n            });\r\n          });\r\n          return data;\r\n        }\r\n        case \"workList\": {\r\n          // workList에서 works 배열에 name이 currentMember이고 그 deadLine이 오늘 이후인것만 필터링\r\n          let result = projectPlanList.findWorkByName(this.currentMember);\r\n          let data = [];\r\n          result.forEach((element) => {\r\n            let parentProject = projectPlanList.findProjectByWork(element);\r\n            data.push({\r\n              프로젝트: parentProject.title,\r\n              업무: element.position,\r\n              설명: element.desc,\r\n              마감일: element.deadLine,\r\n            });\r\n          });\r\n          return data;\r\n        }\r\n        default: {\r\n          return [];\r\n        }\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style lang=\"\"></style>\r\n","import { render } from \"./mainTable.vue?vue&type=template&id=4c6afbe7&lang=true\"\nimport script from \"./mainTable.vue?vue&type=script&lang=js\"\nexport * from \"./mainTable.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["eventList","reactive","localStorage","getItem","JSON","parse","detailList","eventTemplate","title","start","end","id","detailTemplate","people","description","location","recurringEventTemplate","groupId","startTime","endTime","memberSpecificEventList","setList","name","raw","projectPlanList","findWorkByName","newEvent","forEach","item","parent","findProjectByWork","push","position","deadLine","allDay","backgroundColor","type","this","saveList","list","undefined","length","NotificationList","member","MemberList","currentMember","setItem","stringify","setEventByProjects","rawData","callPlanList","result","map","date1","projectIdx","index","Partipacants","List","workList","finishedList","newList","originalIdx","console","log","idx","workPush","works","parentIdx","status","setCookies","callWorkList","project","find","filter","callList","moment","format","findParentWorkList","workFinish","parentList","every","parentProject","indexOf","splice","findWorks","findProject","findWorkAndProject","work","callFinishedList","findProject2","deletePlanWork","modifySaveList","original","newWork","originalTitle","flatMap","findProjectByName","workLists","some","includes","projects","workListEntry","list2","getCookies","$options","tableData","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_el_table","data","border","_Fragment","_renderList","value","key","_createBlock","_component_el_table_column","label","prop","props","String","required","currentTable","mounted","computed","element","제목","시작일","마감일","설명","desc","갱신일","update","isSame","text","join","참가인원","프로젝트","업무","__exports__","render"],"sourceRoot":""}